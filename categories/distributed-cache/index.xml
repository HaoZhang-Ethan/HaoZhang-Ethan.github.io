<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Distributed Cache on Hugoplate</title><link>/categories/distributed-cache/</link><description>Recent content in Distributed Cache on Hugoplate</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Dec 2023 05:00:00 +0000</lastBuildDate><atom:link href="/categories/distributed-cache/index.xml" rel="self" type="application/rss+xml"/><item><title>分布式缓存集群下数据分配策略</title><link>/blog/post-2/</link><pubDate>Wed, 13 Dec 2023 05:00:00 +0000</pubDate><guid>/blog/post-2/</guid><description/></item><item><title>服务器运行环境隔离方法（容器化）</title><link>/blog/post-4/</link><pubDate>Wed, 13 Dec 2023 05:00:00 +0000</pubDate><guid>/blog/post-4/</guid><description>一些环境隔离方法 虚拟化： 使用虚拟化技术，如 VMware、VirtualBox 或 KVM，可以在物理服务器上创建多个虚拟服务器，每个虚拟服务器都有自己独立的操作系统和资源。这提供了强大的隔离，防止一个虚拟机的问题影响其他虚拟机。 容器化： 使用容器技术，如 Docker，可以将应用程序及其依赖项打包成一个独立的容器。每个容器运行在独立的环境中，与主机和其他容器隔离。这提供了更轻量级的隔离，同时提高了灵活性和可移植性。 操作系统级别的隔离： 使用操作系统级别的隔离技术，如 Linux 的容器（LXC）或 FreeBSD 的 jails。这些技术允许将进程和文件系统隔离开来，每个隔离的环境都有自己的文件系统和进程空间。 这里，综合考虑实验室设备情况以及管理实现难度，我们选择的容器化技术，通过Docker实现环境隔离，Docker是一种轻量级容器技术，通过将应用程序及其依赖项打包成独立的容器，提供了一致性和可移植性。Portainer是一个用于简化Docker容器管理的开源工具，提供直观的Web界面，使用户能够轻松查看、创建、启动和停止Docker容器。</description></item><item><title>编译Alluxio源代码</title><link>/blog/post-3/</link><pubDate>Wed, 13 Dec 2023 05:00:00 +0000</pubDate><guid>/blog/post-3/</guid><description>0. 编译环境构建 （ssh dcache@xxxxxx）这个服务器已经构建了编译环境，如果如果只需要重编译alluxio直接从1小节开始。
编译Alluxio源代码 - Alluxio v2.9.3 (stable) 安装alluxio build https://hub.</description></item></channel></rss>